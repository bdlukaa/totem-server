// This file is auto-generated by @hey-api/openapi-ts

export type LoginOut = {
    login: boolean;
};

export type TokenOut = {
    key: string;
};

export type ProfileAvatarTypeEnum = 'TD' | 'IM';

export type UserSchema = {
    profile_avatar_type: ProfileAvatarTypeEnum;
    name?: string | null;
    /**
     * Designates whether the user can log into this admin site.
     */
    is_staff?: boolean;
    profile_avatar_seed?: string;
    /**
     * Profile image, must be under 5mb. Will be cropped to a square.
     */
    profile_image?: string | null;
};

export type Message = {
    message: string;
};

export type AvatarUpdate = {
    avatar_type: ProfileAvatarTypeEnum | null;
    update_avatar_seed: boolean | null;
};

export type EventsFilterSchema = {
    category: string | null;
    author: string | null;
};

export type Input = {
    limit?: number;
    offset?: number;
};

export type EventListSchema = {
    space: SpaceSchema;
    url: string;
    start?: string;
    slug?: string | null;
    date_created: string;
    date_modified: string;
    title?: string | null;
};

export type PagedEventListSchema = {
    items: Array<EventListSchema>;
    count: number;
};

export type SpaceSchema = {
    author: UserSchema;
    title: string;
    slug?: string | null;
    date_created: string;
    date_modified: string;
    subtitle: string;
};

export type AuthorFilterSchema = {
    name: string;
    slug: string;
};

export type CategoryFilterSchema = {
    name: string;
    slug: string;
};

export type FilterOptionsSchema = {
    categories: Array<CategoryFilterSchema>;
    authors: Array<AuthorFilterSchema>;
};

export type EventDetailSchema = {
    slug: string;
    title: string;
    space: EventSpaceSchema;
    space_title: string;
    description: string;
    price: number;
    seats_left: number;
    duration: number;
    recurring: string;
    subscribers: number;
    start: string;
    attending: boolean;
    open: boolean;
    started: boolean;
    cancelled: boolean;
    joinable: boolean;
    ended: boolean;
    rsvp_url: string;
    join_url: string | null;
    subscribe_url: string;
    calLink: string;
    subscribed: boolean | null;
    user_timezone: string | null;
};

export type EventSpaceSchema = {
    author: UserSchema;
    title: string;
    slug?: string | null;
    date_created: string;
    date_modified: string;
    subtitle: string;
    categories: Array<number>;
    /**
     * Short description, max 255 characters
     */
    short_description?: string | null;
    /**
     * Example: Once a month (or week, day, etc). Do not put specific times or days of the week.
     */
    recurring: string;
    /**
     * Image for the Space header, must be under 5mb
     */
    image?: string | null;
};

export type EventCalendarFilterSchema = {
    /**
     * Space slug
     */
    space_slug?: string;
    /**
     * Month of the year, 1-12
     */
    month?: number;
    /**
     * Year of the month, e.g. 2024
     */
    year?: number;
};

export type EventCalendarSchema = {
    title: string;
    start: string;
    slug: string;
    url: string;
};

export type WebflowEventsFilterSchema = {
    /**
     * Filter by Keeper's username
     */
    keeper_username?: string | null;
};

export type WebflowEventSchema = {
    start: string;
    name: string;
    keeper_name: string;
    keeper_username: string;
    join_link: string;
    image_link: string | null;
    keeper_image_link: string | null;
};

export type NextEventSchema = {
    slug: string;
    start: string;
    link: string;
    title: string | null;
    seats_left: number;
};

export type SpaceDetailSchema = {
    slug: string;
    title: string;
    image_link: string | null;
    description: string;
    author: UserSchema;
    nextEvent: NextEventSchema;
    category: string | null;
};

export type TotemApiApiSecretData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/protected';
};

export type TotemApiApiSecretResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TotemApiApiLoginData = {
    body?: never;
    path?: never;
    query: {
        email: string;
    };
    url: '/api/v1/auth/login';
};

export type TotemApiApiLoginResponses = {
    /**
     * OK
     */
    200: LoginOut;
};

export type TotemApiApiLoginResponse = TotemApiApiLoginResponses[keyof TotemApiApiLoginResponses];

export type TotemApiApiTokenData = {
    body?: never;
    path?: never;
    query: {
        token: string;
    };
    url: '/api/v1/auth/token';
};

export type TotemApiApiTokenResponses = {
    /**
     * OK
     */
    200: TokenOut;
};

export type TotemApiApiTokenResponse = TotemApiApiTokenResponses[keyof TotemApiApiTokenResponses];

export type TotemApiApiCurrentUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/currentuser';
};

export type TotemApiApiCurrentUserErrors = {
    /**
     * Not Found
     */
    404: Message;
};

export type TotemApiApiCurrentUserError = TotemApiApiCurrentUserErrors[keyof TotemApiApiCurrentUserErrors];

export type TotemApiApiCurrentUserResponses = {
    /**
     * OK
     */
    200: UserSchema;
};

export type TotemApiApiCurrentUserResponse = TotemApiApiCurrentUserResponses[keyof TotemApiApiCurrentUserResponses];

export type TotemApiApiUserAvatarUpdateData = {
    body: AvatarUpdate;
    path?: never;
    query?: never;
    url: '/api/v1/user/avatarupdate';
};

export type TotemApiApiUserAvatarUpdateErrors = {
    /**
     * Not Found
     */
    404: Message;
};

export type TotemApiApiUserAvatarUpdateError = TotemApiApiUserAvatarUpdateErrors[keyof TotemApiApiUserAvatarUpdateErrors];

export type TotemApiApiUserAvatarUpdateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TotemApiApiUserUploadProfileImageData = {
    body: {
        file: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/api/v1/user/avatarimage';
};

export type TotemApiApiUserUploadProfileImageErrors = {
    /**
     * Not Found
     */
    404: Message;
};

export type TotemApiApiUserUploadProfileImageError = TotemApiApiUserUploadProfileImageErrors[keyof TotemApiApiUserUploadProfileImageErrors];

export type TotemApiApiUserUploadProfileImageResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TotemCirclesApiListEventsData = {
    body?: never;
    path?: never;
    query: {
        category: string | null;
        author: string | null;
        limit?: number;
        offset?: number;
    };
    url: '/api/v1/spaces/';
};

export type TotemCirclesApiListEventsResponses = {
    /**
     * OK
     */
    200: PagedEventListSchema;
};

export type TotemCirclesApiListEventsResponse = TotemCirclesApiListEventsResponses[keyof TotemCirclesApiListEventsResponses];

export type TotemCirclesApiFilterOptionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/spaces/filter-options';
};

export type TotemCirclesApiFilterOptionsResponses = {
    /**
     * OK
     */
    200: FilterOptionsSchema;
};

export type TotemCirclesApiFilterOptionsResponse = TotemCirclesApiFilterOptionsResponses[keyof TotemCirclesApiFilterOptionsResponses];

export type TotemCirclesApiEventDetailData = {
    body?: never;
    path: {
        event_slug: string;
    };
    query?: never;
    url: '/api/v1/spaces/event/{event_slug}';
};

export type TotemCirclesApiEventDetailResponses = {
    /**
     * OK
     */
    200: EventDetailSchema;
};

export type TotemCirclesApiEventDetailResponse = TotemCirclesApiEventDetailResponses[keyof TotemCirclesApiEventDetailResponses];

export type TotemCirclesApiUpcomingEventsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Space slug
         */
        space_slug?: string;
        /**
         * Month of the year, 1-12
         */
        month?: number;
        /**
         * Year of the month, e.g. 2024
         */
        year?: number;
    };
    url: '/api/v1/spaces/calendar';
};

export type TotemCirclesApiUpcomingEventsResponses = {
    /**
     * OK
     */
    200: Array<EventCalendarSchema>;
};

export type TotemCirclesApiUpcomingEventsResponse = TotemCirclesApiUpcomingEventsResponses[keyof TotemCirclesApiUpcomingEventsResponses];

export type TotemCirclesApiWebflowEventsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter by Keeper's username
         */
        keeper_username?: string | null;
    };
    url: '/api/v1/spaces/webflow/list_events';
};

export type TotemCirclesApiWebflowEventsListResponses = {
    /**
     * OK
     */
    200: Array<WebflowEventSchema>;
};

export type TotemCirclesApiWebflowEventsListResponse = TotemCirclesApiWebflowEventsListResponses[keyof TotemCirclesApiWebflowEventsListResponses];

export type TotemCirclesApiListSpacesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/spaces/list';
};

export type TotemCirclesApiListSpacesResponses = {
    /**
     * OK
     */
    200: Array<SpaceDetailSchema>;
};

export type TotemCirclesApiListSpacesResponse = TotemCirclesApiListSpacesResponses[keyof TotemCirclesApiListSpacesResponses];

export type ClientOptions = {
    baseUrl: string;
};