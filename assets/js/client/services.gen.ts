// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  TotemApiApiSecretResponse,
  TotemApiApiLoginData,
  TotemApiApiLoginResponse,
  TotemApiApiTokenData,
  TotemApiApiTokenResponse,
  TotemApiApiCurrentUserResponse,
  TotemCirclesApiListCirclesData,
  TotemCirclesApiListCirclesResponse,
  TotemCirclesApiFilterOptionsResponse,
} from "./types.gen"

export class DefaultService {
  /**
   * Secret
   * @returns unknown OK
   * @throws ApiError
   */
  public static totemApiApiSecret(): CancelablePromise<TotemApiApiSecretResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/protected",
    })
  }

  /**
   * Login
   * @param data The data for the request.
   * @param data.email
   * @returns LoginOut OK
   * @throws ApiError
   */
  public static totemApiApiLogin(
    data: TotemApiApiLoginData
  ): CancelablePromise<TotemApiApiLoginResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/auth/login",
      query: {
        email: data.email,
      },
    })
  }

  /**
   * Token
   * @param data The data for the request.
   * @param data.token
   * @returns TokenOut OK
   * @throws ApiError
   */
  public static totemApiApiToken(
    data: TotemApiApiTokenData
  ): CancelablePromise<TotemApiApiTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/auth/token",
      query: {
        token: data.token,
      },
    })
  }

  /**
   * Current User
   * @returns UserSchema OK
   * @throws ApiError
   */
  public static totemApiApiCurrentUser(): CancelablePromise<TotemApiApiCurrentUserResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/auth/currentuser",
      errors: {
        404: "Not Found",
      },
    })
  }
}

export class CirclesService {
  /**
   * List Circles
   * @param data The data for the request.
   * @param data.category
   * @param data.author
   * @param data.limit
   * @param data.offset
   * @returns PagedCircleEventSchema OK
   * @throws ApiError
   */
  public static totemCirclesApiListCircles(
    data: TotemCirclesApiListCirclesData
  ): CancelablePromise<TotemCirclesApiListCirclesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/circles/",
      query: {
        category: data.category,
        author: data.author,
        limit: data.limit,
        offset: data.offset,
      },
    })
  }

  /**
   * Filter Options
   * @returns FilterOptionsSchema OK
   * @throws ApiError
   */
  public static totemCirclesApiFilterOptions(): CancelablePromise<TotemCirclesApiFilterOptionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/circles/filter-options",
    })
  }
}
