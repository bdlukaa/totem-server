// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser, formDataBodySerializer } from '@hey-api/client-fetch';
import type { TotemApiApiSecretError, TotemApiApiSecretResponse, TotemApiApiLoginData, TotemApiApiLoginError, TotemApiApiLoginResponse, TotemApiApiTokenData, TotemApiApiTokenError, TotemApiApiTokenResponse, TotemApiApiCurrentUserError, TotemApiApiCurrentUserResponse, TotemApiApiUserAvatarUpdateData, TotemApiApiUserAvatarUpdateError, TotemApiApiUserAvatarUpdateResponse, TotemApiApiUserUploadProfileImageData, TotemApiApiUserUploadProfileImageError, TotemApiApiUserUploadProfileImageResponse, TotemCirclesApiListEventsData, TotemCirclesApiListEventsError, TotemCirclesApiListEventsResponse, TotemCirclesApiFilterOptionsError, TotemCirclesApiFilterOptionsResponse, TotemCirclesApiEventDetailData, TotemCirclesApiEventDetailError, TotemCirclesApiEventDetailResponse, TotemCirclesApiUpcomingEventsData, TotemCirclesApiUpcomingEventsError, TotemCirclesApiUpcomingEventsResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Secret
 */
export const totemApiApiSecret = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<TotemApiApiSecretResponse, TotemApiApiSecretError, ThrowOnError>({
        ...options,
        url: '/api/v1/protected'
    });
};

/**
 * Login
 */
export const totemApiApiLogin = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TotemApiApiLoginData, ThrowOnError>) => {
    return (options?.client ?? client).post<TotemApiApiLoginResponse, TotemApiApiLoginError, ThrowOnError>({
        ...options,
        url: '/api/v1/auth/login'
    });
};

/**
 * Token
 */
export const totemApiApiToken = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TotemApiApiTokenData, ThrowOnError>) => {
    return (options?.client ?? client).post<TotemApiApiTokenResponse, TotemApiApiTokenError, ThrowOnError>({
        ...options,
        url: '/api/v1/auth/token'
    });
};

/**
 * Current User
 */
export const totemApiApiCurrentUser = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<TotemApiApiCurrentUserResponse, TotemApiApiCurrentUserError, ThrowOnError>({
        ...options,
        url: '/api/v1/auth/currentuser'
    });
};

/**
 * User Avatar Update
 */
export const totemApiApiUserAvatarUpdate = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TotemApiApiUserAvatarUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<TotemApiApiUserAvatarUpdateResponse, TotemApiApiUserAvatarUpdateError, ThrowOnError>({
        ...options,
        url: '/api/v1/user/avatarupdate'
    });
};

/**
 * User Upload Profile Image
 */
export const totemApiApiUserUploadProfileImage = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TotemApiApiUserUploadProfileImageData, ThrowOnError>) => {
    return (options?.client ?? client).post<TotemApiApiUserUploadProfileImageResponse, TotemApiApiUserUploadProfileImageError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        url: '/api/v1/user/avatarimage'
    });
};

/**
 * List Events
 */
export const totemCirclesApiListEvents = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TotemCirclesApiListEventsData, ThrowOnError>) => {
    return (options?.client ?? client).get<TotemCirclesApiListEventsResponse, TotemCirclesApiListEventsError, ThrowOnError>({
        ...options,
        url: '/api/v1/spaces/'
    });
};

/**
 * Filter Options
 */
export const totemCirclesApiFilterOptions = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<TotemCirclesApiFilterOptionsResponse, TotemCirclesApiFilterOptionsError, ThrowOnError>({
        ...options,
        url: '/api/v1/spaces/filter-options'
    });
};

/**
 * Event Detail
 */
export const totemCirclesApiEventDetail = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<TotemCirclesApiEventDetailData, ThrowOnError>) => {
    return (options?.client ?? client).get<TotemCirclesApiEventDetailResponse, TotemCirclesApiEventDetailError, ThrowOnError>({
        ...options,
        url: '/api/v1/spaces/event/{event_slug}'
    });
};

/**
 * Upcoming Events
 */
export const totemCirclesApiUpcomingEvents = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<TotemCirclesApiUpcomingEventsData, ThrowOnError>) => {
    return (options?.client ?? client).get<TotemCirclesApiUpcomingEventsResponse, TotemCirclesApiUpcomingEventsError, ThrowOnError>({
        ...options,
        url: '/api/v1/spaces/calendar'
    });
};